const functions = require('firebase-functions')
const admin = require('firebase-admin')
admin.initializeApp(functions.config().firebase)
const slugify = require('slugify')
const firestore = admin.firestore()
const algoliasearch = require('algoliasearch')

const client = algoliasearch(functions.config().algolia.app_id, functions.config().algolia.api_key)

// Name fo the algolia index for Blog posts content.
const ALGOLIA_INDEX_NAME = 'documents'

exports.register = functions.auth.user().onCreate(async (event) => {
  const user = event.data // The Firebase user.

  const {email, displayName, photoURL, uid} = user // Details of the user.
  const isAdmin = false

  let slug = slugify(displayName, {
    replacement: ' ',
    lower: true
  }).split(' ').join('')
  // Check user slug
  let userSnapshot = await firestore.collection('user').where('slug', '==', slug).get()
  if (userSnapshot.docs.length > 0) {
    slug = `${slug}-${userSnapshot.docs.length}`
  }

  return firestore.doc(`user/${uid}`).set({
    email,
    displayName,
    photoURL,
    uid,
    isAdmin,
    slug
  })
})

exports.onDocumentUpdate = functions.firestore.document('document/{slug}')
  .onUpdate(event => {
    const document = event.data.data()

    document.objectID = event.params.slug

    if (document.hasPreview && !document.doc && document.text) {
      let {slug, description, date, displayName, title, text, thumbnail, userSlug, objectID} = document
      const index = client.initIndex(ALGOLIA_INDEX_NAME)
      index.saveObject({objectID, slug, description, date, displayName, title, text, thumbnail, userSlug})
      return event.data.ref.update({
        text: null,
        doc: null
      })
    } else {
      return true
    }
  })

exports.onDocumentDelete = functions.firestore.document('document/{slug}')
  .onDelete(event => {
    const document = event.data.previous.data()

    document.objectID = event.params.slug

    firestore.doc(`pdf/${document.slug}`).delete().catch(console.log)

    return client.deleteObject(document.slug, err => {
      if (err) {
        console.log(err)
      } else {
        console.log('Remove success', document.slug)
      }
    })
  })

exports.onDocumentCreate = functions.firestore.document('document/{slug}')
  .onCreate(async (event) => {
    const document = event.data.data()

    // Get document author followers
    let authorFollowers = await firestore.collection(`user/${document.uid}/follower/`).get().then(async (snap) => snap.docs)
    if (authorFollowers.length > 0) {
      let followers = []
      authorFollowers.forEach((value, key) => {
        followers.push(firestore.doc(`user/${value.data().uid}`).get().then(snap => snap.data()))
      })

      return Promise.all(followers).then(users => {
        console.log(users[0].displayName)
        let tokens = users.filter(user => user.token)

        const payload = {
          notification: {
            title: `${document.displayName} Yeni bir döküman yükledi!`,
            body: `${document.title} adlı bir döküman henüz ders.im'e yüklendi.`,
            icon: document.photoURL
          }
        }

        if (tokens.length > 0) {
          return admin.messaging().sendToDevice(tokens, payload).then(response => {
            console.log(response)
          })
        }
      })
    }
  })

exports.onSyllabusCreate = functions.firestore.document('syllabus/{slug}')
  .onCreate(async (event) => {
    const document = event.data.data()

    // Get document author followers
    let authorFollowers = await firestore.collection(`user/${document.uid}/follower/`).get().then(async (snap) => snap.docs)
    if (authorFollowers.length > 0) {
      let followers = []
      authorFollowers.forEach((value, key) => {
        followers.push(firestore.doc(`user/${value.data().uid}`).get().then(snap => snap.data()))
      })

      return Promise.all(followers).then(users => {
        console.log(users[0].displayName)
        let tokens = users.filter(user => user.token)

        const payload = {
          notification: {
            title: `${document.displayName} Yeni bir döküman yükledi!`,
            body: `${document.title} adlı bir döküman henüz ders.im'e yüklendi.`,
            icon: document.photoURL
          }
        }

        if (tokens.length > 0) {
          return admin.messaging().sendToDevice(tokens, payload).then(response => {
            console.log(response)
          })
        }
      })
    }
  })
